#+TITLE: Colin's Emacs Configuration
#+AUTHOR: Colin Alstad
#+EMAIL: colin.alstad@gmail.com

* Emacs Configuration
  This is my "dot emacs" configuration using =org-mode=.  It has been
  heavily influenced/stolen from [[https://github.com/abedra/emacs.d][Aaron Bedra's emacs config]].
** Global Configs
*** User details
    Emacs will normally pick this up automatically, but this way I can
    be sure the right information is always present.
    #+begin_src emacs-lisp
      (setq user-full-name "Colin Alstad")
      (setq user-mail-address "colin.alstad@gmail.com")
    #+end_src
*** Common Lisp for Emacs
    Emacs lisp is really only a subset of common lisp, and I need to
    have some of the additional functionality to make the configuration
    and its dependencies work properly, which we get by requiring
    [[http://www.emacswiki.org/emacs/CommonLispForEmacs][Common Lisp for Emacs]].
    #+begin_src emacs-lisp
     (require 'cl)
    #+end_src
*** Package Repositories
    #+begin_src emacs-lisp
      (require 'package)
      (setq package-enable-at-startup nil)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
      (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
    #+end_src

    [[https://github.com/jwiegley/use-package][=use-package=]] is a macro that allows for isolation in requiring
    and configuring emacs packages.
    #+begin_src emacs-lisp
      (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

      (eval-when-compile
	(require 'use-package))
    #+end_src

    Always ensure that packages are installed from =package.el=
    #+begin_src emacs-lisp
      (setq use-package-always-ensure t)
    #+end_src
*** Key bindings
    Miscellaneous key binding stuff that doesn't fit anywhere else.
    #+begin_src emacs-lisp
      (global-set-key (kbd "RET") 'newline-and-indent)
      (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
      (global-set-key (kbd "C-+") 'text-scale-increase)
      (global-set-key (kbd "C--") 'text-scale-decrease)
    #+end_src
*** UI
**** Skip splash screen on startup
     #+begin_src emacs-lisp
       (setq initial-buffer-choice t)
     #+end_src
**** GUI options
     #+begin_src emacs-lisp
       (when window-system
	 (setq frame-title-format '(buffer-file-name "%f" ("%b")))
	 (tooltip-mode -1)       ; dont need mouse tootips!
	 (mouse-wheel-mode t)    ; stupid mice
	 (blink-cursor-mode -1)  ; about to give me seizures
	 (tool-bar-mode -1))
     #+end_src
**** Set a color theme
     #+begin_src emacs-lisp
       (use-package zenburn-theme
	 :config (load-theme 'zenburn t))
     #+end_src
**** Turn off visual and audio bells
     #+begin_src emacs-lisp
       (setq visible-bell t)
       (setq ring-bell-function 'ignore)
     #+end_src
**** Add indication at bottom of buffer for empty lines
     #+begin_src emacs-lisp
       (set-default 'indicate-empty-lines t)
     #+end_src
**** Mode line settings
     #+begin_src emacs-lisp
       (line-number-mode t)
       (column-number-mode t)
       (size-indication-mode t)
     #+end_src
**** Enable y/n answers
     #+begin_src emacs-lisp
       (fset 'yes-or-no-p 'y-or-n-p)
     #+end_src
*** Editing
**** Marking text
     Be able to write over the marked region and also highlight the
     marked region.
     #+begin_src emacs-lisp
       (delete-selection-mode t)
       (transient-mark-mode t)
     #+end_src
**** Filling
***** Add auto fill to certain modes
      #+begin_src emacs-lisp
	(add-hook 'text-mode-hook 'turn-on-auto-fill)
      #+end_src
***** Unfill a region
      #+begin_src emacs-lisp
	(defun calstad/unfill-region ()
	  (interactive)
	  (let ((fill-column (point-max)))
	    (fill-region (region-beginning) (region-end) nil)))
      #+end_src
**** Spell check
     #+begin_src emacs-lisp
       (add-hook 'text-mode-hook 'flyspell-mode)
       (add-hook 'prog-mode-hook 'flyspell-prog-mode)
     #+end_src

     Remap keybinding
     #+begin_src emacs-lisp
       (eval-after-load 'flyspell
	 '(define-key flyspell-mode-map (kbd "C-;") nil))
     #+end_src
**** Death to tabs
     #+begin_src emacs-lisp
       (setq-default indent-tabs-mode nil)
     #+end_src
**** Highlight matching parens and auto pair
     #+begin_src emacs-lisp
       (show-paren-mode t)
       (setq show-paren-style 'parenthesis)
       (electric-pair-mode)
     #+end_src
*** Windows and Buffers
**** Swap windows
     If I have two windows open, it swaps them.
     #+begin_src emacs-lisp
       (defun calstad/swap-windows ()
	 (interactive)
	 (if (/= (count-windows) 2)
	     (message "You need exactly 2 windows to do this.")
	   (let* ((w1 (first (window-list)))
		  (w2 (second (window-list)))
		  (b1 (window-buffer w1))
		  (b2 (window-buffer w2))
		  (s1 (window-start w1))
		  (s2 (window-start w2)))
	     (set-window-buffer w1 b2)
	     (set-window-buffer w2 b1)
	     (set-window-start w1 s2)
	     (set-window-start w2 s1)))
	 (other-window 1))
     #+end_src
***** Keybinding
      #+begin_src emacs-lisp
	(global-set-key (kbd "C-c s") 'calstad/swap-windows)
      #+end_src
**** Kill other buffers
     Kills all the buffers but the current one.  Doesent mess with
     earmuffed buffers.
     #+begin_src emacs-lisp
       (defun calstad/kill-other-buffers ()
	 (interactive)
	 (dolist (buffer (buffer-list))
	   (unless (or (eql buffer (current-buffer)) (not (buffer-file-name buffer)))
	     (kill-buffer buffer))))
     #+end_src
**** Kill the buffer and delete file
     Kills the current buffer and deletes the file it is visiting.
     #+begin_src emacs-lisp
       (defun calstad/delete-file-and-buffer ()
	 (interactive)
	 (let ((filename (buffer-file-name)))
	   (when filename
	     (delete-file filename)
	     (message "Deleted file %s" filename)))
	 (kill-buffer))
     #+end_src
**** Revert buffers automatically when underlying files change
     #+begin_src emacs-lisp
       (global-auto-revert-mode t)
     #+end_src
***** Keybinding
      #+begin_src emacs-lisp
	(global-set-key (kbd "C-c C-k") 'calstad/delete-file-and-buffer)
      #+end_src

**** Unique buffer names
     Make it so that buffers have unique names if the files dont.
     #+begin_src emacs-lisp
       (require 'uniquify)
       (setq uniquify-buffer-name-style 'forward)
       (setq uniquify-separator "/")
       (setq uniquify-after-kill-buffer-p t)     ; rename after killing uniquified
       (setq uniquify-ignore-buffers-re "^\\*")  ; don't muck with special buffers
     #+end_src
*** Persistence Files
    Several Emacs major modes use files for persistence between
    sessions and I keep them all in the same directory.
    #+begin_src emacs-lisp
      (setq calstad/persistence-dir (expand-file-name "persistence/" user-emacs-directory))
      (unless (file-exists-p calstad/persistence-dir)
        (make-directory calstad/persistence-dir t))
    #+end_src
**** Save settings from Customize into seperate file
     By default, settings changed through the Customize UI are added to
     the =init.el= file.  This saves those customizations into a
     separate file.
     #+begin_src emacs-lisp
       (setq calstad/custom-file (expand-file-name "custom.el" calstad/persistence-dir))
       (if (file-exists-p calstad/custom-file)
           (load custom-file))
     #+end_src
**** Recently accessed files
     #+begin_src emacs-lisp
       (setq recentf-save-file (expand-file-name "recentf" calstad/persistence-dir))
     #+end_src
**** Tramp Connections
     #+begin_src emacs-lisp
       (setq tramp-persistency-file-name (expand-file-name "tramp" calstad/persistence-dir))
     #+end_src
**** Forget backup and temporary files
     Dont create backup or temporary files
     #+begin_src emacs-lisp
       (setq make-backup-files nil)
       (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
       (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
       (setq auto-save-list-file-prefix nil)
     #+end_src
** System Configs
*** Mac OS X
    Set meta to apple key
    #+begin_src emacs-lisp
      (setq mac-command-modifier 'meta)
    #+end_src

    Set font
    #+begin_src emacs-lisp
      (if window-system
	  (setq default-frame-alist '((font . "-*-Consolas-medium-r-normal--18-0-72-72-m-0-iso10646-1"))))
    #+end_src
** Mode and Language Specific Configs
*** Latex
**** AUCTeX
     [[https://www.emacswiki.org/emacs/AUCTeX][AUCTeX]] is a comprehensive customizable integrated environment for
     writing input files for TeX/LaTeX/ConTeXt/Texinfo using Emacs.
     #+begin_src emacs-lisp
       (use-package tex
	 :ensure auctex)
     #+end_src
**** Auto pair "$"
     #+begin_src emacs-lisp
       (add-hook 'TeX-mode-hook
		 '(lambda ()
		    (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)))
    #+end_src
**** Subscripts and superscripts
     Insert braces after =_= and =^=
     #+begin_src emacs-lisp
       (setq TeX-electric-sub-and-superscript 't)
     #+end_src

*** Dired
**** Use =a= to reuse dired buffer
     The command =dired-find-alternate-file= is disabled by default so
     we enable it which allows us to use the =a= key to reuse the
     current dired buffer
     #+begin_src emacs-lisp
       (put 'dired-find-alternate-file 'disabled nil)
     #+end_src

*** Docker
    #+begin_src emacs-lisp
      (use-package dockerfile-mode)
    #+end_src
*** Emacs Lisp
    Add hooks for navigation and documentation
    #+begin_src emacs-lisp
      (use-package elisp-slime-nav
        :init
        (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
          (add-hook hook 'turn-on-elisp-slime-nav-mode)))

      (use-package paredit
        :init
        (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode))

      (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    #+end_src

    Key bindings
    #+begin_src emacs-lisp
      (define-key read-expression-map (kbd "TAB") 'lisp-complete-symbol)
      (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
    #+end_src
*** Eshell
    Start eshell or switch to it if it's active.
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-x m") 'eshell)
    #+end_src

    Start a new eshell even if one is active.
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-x M")
                  (lambda ()
                    (interactive)
                    (eshell t)))
    #+end_src

    Save eshell persistence files out of the way
    #+begin_src emacs-lisp
      (setq eshell-directory-name (expand-file-name "eshell/" calstad/persistence-dir))
    #+end_src
*** IDO and Smex
    [[https://www.emacswiki.org/emacs/InteractivelyDoThings][=ido=]] supercharges Emacs's completion engine.
    #+begin_src emacs-lisp
      (ido-mode t)
      (ido-everywhere t)
      (setq ido-enable-prefix nil
            ido-enable-flex-matching t
            ido-auto-merge-work-directories-length nil
            ido-create-new-buffer 'always
            ido-use-filename-at-point 'guess
            ido-use-url-at-point nil
            ido-use-virtual-buffers t
            ido-handle-duplicate-virtual-buffers 2
            ido-max-prospects 10
            ido-save-directory-list-file (expand-file-name "ido.last" calstad/persistence-dir))
    #+end_src

    [[https://github.com/DarwinAwardWinner/ido-ubiquitous][=ido-ubiquitous=]] replaces stock emacs completion with =ido=
    completion wherever it is possible to do so without breaking
    things.
    #+begin_src emacs-lisp
      (use-package ido-ubiquitous
        :config
        (ido-ubiquitous-mode t)
        ;; Let magit use its own ido interface
        (setq magit-completing-read-function 'magit-ido-completing-read))
    #+end_src

    [[https://github.com/lewang/flx][=flx-ido=]] brings fuzzy matching to =ido= completions.
    #+begin_src emacs-lisp
      (use-package flx-ido
        :config
        (flx-ido-mode 1)
        ;; disable ido faces to see flx highlights.
        (setq ido-enable-flex-matching t)
        (setq ido-use-faces nil))
    #+end_src

    [[https://github.com/nonsequitur/smex][Smex]] is a =M-x= enhancement for Emacs. Built on top of =ido=, it
    provides a convenient interface to recently and most
    frequently used commands.
    #+begin_src emacs-lisp
      (use-package smex
        :bind (("M-x" . smex)
               ("M-X" . smex-major-mode-commands))
        :config
        (smex-initialize)
        (setq smex-save-file (expand-file-name "smex-items" calstad/persistence-dir)))
    #+end_src

    For any case where =ido= cannot be used, there is another older mode
    called =icomplete-mode= that integrates with standard emacs completion
    and adds some ido-like behavior.
    #+begin_src emacs-lisp
      (icomplete-mode +1)
    #+end_src
**** TODO May want to add:
     - ido-default-buffer-method
     - ido-default-file-method
**** TODO Not sure about this
     (set-default 'imenu-auto-rescan t)
*** Magit
    #+begin_src emacs-lisp
      (use-package magit
        :bind ("C-x g" . magit-status)
        :config
        ;; Keep file revert warning from showing everytime magit starts
        (setq magit-last-seen-setup-instructions "1.4.0"))
    #+end_src
*** Markdown
    #+begin_src emacs-lisp
      (use-package markdown-mode)
    #+end_src
*** Org
    =org-mode= is one of the most powerful and amazing features of
    Emacs. I use it for task managment, notes, journal, habit tracker,
    latex, and development environment.
    #+begin_src emacs-lisp
      (use-package org
        :pin org
        :bind (("\C-cl" . org-store-link)
               ("\C-ca" . org-agenda)
               ("\C-cb" . org-iswitchb)))
    #+end_src
**** Todo Items
***** Add an in progress state for todo items
      #+begin_src emacs-lisp
	(setq org-todo-keywords
	  '((sequence "TODO" "IN-PROGRESS(!)" "|" "DONE")))
      #+end_src
***** Add a closed timestamp when todos are marked done
      #+begin_src emacs-lisp
	(setq org-log-done 'time)
      #+end_src
***** Enable habit tracking
      #+begin_src emacs-lisp
	(add-to-list 'org-modules 'org-habit)
      #+end_src
***** Change Priorities to be 1-9
      #+begin_src emacs-lisp
	(setq org-highest-priority ?1)
	(setq org-lowest-priority ?9)
	(setq org-default-priority ?9)
      #+end_src
**** Agenda
***** Custom Agenda Views
**** org-babel
     Syntax highlighting for code blocks
     #+begin_src emacs-lisp
       (setq org-src-fontify-natively t)
     #+end_src
**** Exporting
***** Markdown
      #+begin_src emacs-lisp
	(require 'ox-md nil t)
      #+end_src

*** Python
**** IPython
     Newer verions of IPython break the =inferior-python= shell in
     Emacs so we have to set an environment variable to use a simple
     prompt.
     #+begin_src emacs-lisp
       (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
     #+end_src
**** Elpy
    =elpy= Emacs package to bring powerful Python editing to Emacs. It
    combines and configures a number of other packages, both written
    in Emacs Lisp as well as Python.  Documentation can be found [[https://elpy.readthedocs.io/en/latest/index.html][here]].
    #+begin_src emacs-lisp
      (use-package elpy
        :config
        (elpy-enable)
        ;; Use IPython for inferior python processes
        (elpy-use-ipython))

    #+end_src
*** YAML
    #+begin_src emacs-lisp
      (use-package yaml-mode)
    #+end_src
*** YASnippet
    =yasnippet= is a template system for Emacs that allows type an
    abbreviation and automatically expand it into function templates.

    Load =yasnippet= on programming langauge major modes.
    #+begin_src emacs-lisp
      (use-package yasnippet
        :config (yas-global-mode 1))
    #+end_src
