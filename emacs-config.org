#+TITLE: Colin's Emacs Configuration
#+AUTHOR: Colin Alstad
#+EMAIL: colin.alstad@gmail.com

* Emacs Configuration
  This is my "dot emacs" configuration using =org-mode=.  It has been
  heavily influenced/stolen from [[https://github.com/abedra/emacs.d][Aaron Bedra's emacs config]].
** Global Configuration
*** User details
    Emacs will normally pick this up automatically, but this way I can
    be sure the right information is always present.
    #+begin_src emacs-lisp
      (setq user-full-name "Colin Alstad")
      (setq user-mail-address "colin.alstad@gmail.com")
    #+end_src
*** Packages
    We use the [[https://github.com/raxod502/straight.el][straight]] package manager to take care of dependency
    management. The straight package is bootstrapped in the [[file:init.el::;; Install straight.el to manage packages][init file]]
    so that the [[https://github.com/raxod502/straight.el#the-wrong-version-of-my-package-was-loaded][wrong version]] of =org-mode= is not loaded.

    Next we setup straight to use the [[https://github.com/jwiegley/use-package][use-package]] macro for package
    configuration.
    #+begin_src emacs-lisp
      ;; Use straight to install use-package
      (straight-use-package 'use-package)
      ;; Tell use-package to always install from straight
      (setq straight-use-package-by-default t)
    #+end_src
*** UI
**** Skip splash screen on startup
     #+begin_src emacs-lisp
       (setq initial-buffer-choice t)
     #+end_src
**** GUI options
     #+begin_src emacs-lisp
       (when window-system
         (setq frame-title-format '(buffer-file-name "%f" ("%b")))
         (tooltip-mode -1)       ; dont need mouse tootips!
         (mouse-wheel-mode t)    ; stupid mice
         (blink-cursor-mode -1)  ; about to give me seizures
         (tool-bar-mode -1))
     #+end_src
**** Terminal options
     #+begin_src emacs-lisp
       (menu-bar-mode -1)
     #+end_src
**** Set a color theme
     #+begin_src emacs-lisp
       (use-package zenburn-theme
         :config (load-theme 'zenburn t))
     #+end_src
**** Turn off visual and audio bells
     #+begin_src emacs-lisp
       (setq visible-bell t)
       (setq ring-bell-function 'ignore)
     #+end_src
**** Add indication at bottom of buffer for empty lines
     #+begin_src emacs-lisp
       (set-default 'indicate-empty-lines t)
     #+end_src
**** Mode line settings
     #+begin_src emacs-lisp
       (line-number-mode t)
       (column-number-mode t)
       (size-indication-mode t)
     #+end_src
**** Enable y/n answers
     #+begin_src emacs-lisp
       (fset 'yes-or-no-p 'y-or-n-p)
     #+end_src
**** Confirm exiting Emacs
     #+begin_src emacs-lisp
       (setq confirm-kill-emacs 'y-or-n-p)
     #+end_src
*** Editing
**** Key bindings
     Miscellaneous editing keybindings
     #+begin_src emacs-lisp
       (global-set-key (kbd "RET") 'newline-and-indent)
       (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
       (global-set-key (kbd "C-+") 'text-scale-increase)
       (global-set-key (kbd "C--") 'text-scale-decrease)
     #+end_src
**** Marking text
     Be able to write over the marked region and also highlight the
     marked region.
     #+begin_src emacs-lisp
       (delete-selection-mode t)
       (transient-mark-mode t)
     #+end_src
**** Filling
***** Add auto fill to certain modes
      #+begin_src emacs-lisp
        (add-hook 'text-mode-hook 'turn-on-auto-fill)
      #+end_src
***** Unfill a region
      #+begin_src emacs-lisp
        (defun calstad/unfill-region ()
          (interactive)
          (let ((fill-column (point-max)))
            (fill-region (region-beginning) (region-end) nil)))
      #+end_src
**** Spell check
     Use =ispell= as the spell checker
     #+begin_src emacs-lisp
       (setq ispell-program-name "ispell")
     #+end_src

     Check spelling on the fly
     #+begin_src emacs-lisp
       (add-hook 'text-mode-hook 'flyspell-mode)
       (add-hook 'prog-mode-hook 'flyspell-prog-mode)
     #+end_src

     Use a shared dictionary
     #+begin_src emacs-lisp
       (setq ispell-personal-dictionary "~/Dropbox/org/flyspell_dictionary")
     #+end_src
     Remap keybinding
     #+begin_src emacs-lisp
       (eval-after-load 'flyspell
         '(define-key flyspell-mode-map (kbd "C-;") nil))
     #+end_src
**** Death to tabs
     #+begin_src emacs-lisp
       (setq-default indent-tabs-mode nil)
     #+end_src
**** Highlight matching parens and auto pair
     #+begin_src emacs-lisp
       (show-paren-mode t)
       (setq show-paren-style 'parenthesis)
       (electric-pair-mode)
     #+end_src
**** GPG Support
     #+begin_src emacs-lisp
       (setq epg-gpg-program "gpg2")
       (setf epa-pinentry-mode 'loopback)
     #+end_src
**** Enable Disabled commands
     These commands are disabled by default and I would like to use
     them.
     #+begin_src emacs-lisp
       (put 'upcase-region 'disabled nil)
       (put 'downcase-region 'disabled nil)
     #+end_src
*** Windows and Buffers
**** Use better buffer list
     =IBuffer= is a more feature rich buffer list than =Buffer Menu=.
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-x C-b") 'ibuffer)
     #+end_src
**** Swap windows
     If I have two windows open, it swaps them.
     #+begin_src emacs-lisp
       (defun calstad/swap-windows ()
         (interactive)
         (if (/= (count-windows) 2)
             (message "You need exactly 2 windows to do this.")
           (let* ((w1 (first (window-list)))
                  (w2 (second (window-list)))
                  (b1 (window-buffer w1))
                  (b2 (window-buffer w2))
                  (s1 (window-start w1))
                  (s2 (window-start w2)))
             (set-window-buffer w1 b2)
             (set-window-buffer w2 b1)
             (set-window-start w1 s2)
             (set-window-start w2 s1)))
         (other-window 1))
     #+end_src
***** Keybinding
      #+begin_src emacs-lisp
        (global-set-key (kbd "C-c s") 'calstad/swap-windows)
      #+end_src
**** Kill other buffers
     Kills all the buffers but the current one.  Doesent mess with
     earmuffed buffers.
     #+begin_src emacs-lisp
       (defun calstad/kill-other-buffers ()
         (interactive)
         (dolist (buffer (buffer-list))
           (unless (or (eql buffer (current-buffer)) (not (buffer-file-name buffer)))
             (kill-buffer buffer))))
     #+end_src
**** Kill the buffer and delete file
     Kills the current buffer and deletes the file it is visiting.
     #+begin_src emacs-lisp
       (defun calstad/delete-file-and-buffer ()
         (interactive)
         (let ((filename (buffer-file-name)))
           (when filename
             (delete-file filename)
             (message "Deleted file %s" filename)))
         (kill-buffer))
     #+end_src
**** Revert buffers automatically when underlying files change
     #+begin_src emacs-lisp
       (global-auto-revert-mode t)
     #+end_src
***** Keybinding
      #+begin_src emacs-lisp
        (global-set-key (kbd "C-c C-k") 'calstad/delete-file-and-buffer)
      #+end_src

**** Rename buffers
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-c r") 'rename-buffer)
     #+end_src
**** Unique buffer names
     Make it so that buffers have unique names if the files dont.
     #+begin_src emacs-lisp
       (require 'uniquify)
       (setq uniquify-buffer-name-style 'forward)
       (setq uniquify-separator "/")
       (setq uniquify-after-kill-buffer-p t)     ; rename after killing uniquified
       (setq uniquify-ignore-buffers-re "^\\*")  ; don't muck with special buffers
     #+end_src
*** Persistence Files
    Several Emacs major modes use files for persistence between
    sessions and I keep them all in the same directory.
    #+begin_src emacs-lisp
      (setq calstad/persistence-dir (expand-file-name "persistence/" user-emacs-directory))
      (unless (file-exists-p calstad/persistence-dir)
        (make-directory calstad/persistence-dir t))
    #+end_src
**** Save settings from Customize into seperate file
     By default, settings changed through the Customize UI are added to
     the =init.el= file.  This saves those customizations into a
     separate file.
     #+begin_src emacs-lisp
       (setq custom-file (expand-file-name "custom.el" calstad/persistence-dir))
       (unless (file-exists-p custom-file)
         (write-region "" nil custom-file))
       (load custom-file)
     #+end_src
**** Recently accessed files
     #+begin_src emacs-lisp
       (setq recentf-save-file (expand-file-name "recentf" calstad/persistence-dir))
     #+end_src
**** Bookmarks
     #+begin_src emacs-lisp
       (setq bookmark-default-file (expand-file-name "bookmarks" calstad/persistence-dir))
     #+end_src
**** URL Cache, Cookies, and History
     #+begin_src emacs-lisp
       (setq url-configuration-directory (expand-file-name "url/" calstad/persistence-dir))
     #+end_src
**** Tramp Connections
     #+begin_src emacs-lisp
       (setq tramp-persistency-file-name (expand-file-name "tramp" calstad/persistence-dir))
     #+end_src
**** Forget backup and temporary files
     Dont create backup or temporary files
     #+begin_src emacs-lisp
       (setq make-backup-files nil)
       (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
       (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
       (setq auto-save-list-file-prefix nil)
     #+end_src
** System Specific Configuration
*** Mac OS X
**** Set meta to apple key
    #+begin_src emacs-lisp
      (setq mac-command-modifier 'meta)
    #+end_src
**** Set font
    #+begin_src emacs-lisp
      (if window-system
          (setq default-frame-alist '((font . "-*-Monaco-medium-r-normal--15-0-72-72-m-0-iso10646-1"))))
    #+end_src
**** Setup path for GUI emacs
     #+begin_src emacs-lisp
       (use-package exec-path-from-shell
         :config (exec-path-from-shell-initialize))
     #+end_src
** Mode and Language Specific Configuration
*** Company
    [[http://company-mode.github.io][company-mode]] is a text completion framework for Emacs. The name
    stands for "complete anything". It uses pluggable back-ends and
    front-ends to retrieve and display completion candidates.
    #+begin_src emacs-lisp
      (use-package company
        :bind (("<C-return>" . company-complete)
               :map company-active-map ("M-d" . company-show-doc-buffer))
        :init (add-hook 'after-init-hook 'global-company-mode))
    #+end_src
*** Dired
**** Use =a= to reuse dired buffer
     The command =dired-find-alternate-file= is disabled by default so
     we enable it which allows us to use the =a= key to reuse the
     current dired buffer
     #+begin_src emacs-lisp
       (put 'dired-find-alternate-file 'disabled nil)
     #+end_src
**** Human readable file sizes
     #+begin_src emacs-lisp
       (setq dired-listing-switches "-alh")
     #+end_src
*** Docker
    #+begin_src emacs-lisp
      (use-package dockerfile-mode)
    #+end_src
*** Emacs Lisp
    Add hooks for navigation and documentation
    #+begin_src emacs-lisp
      (use-package elisp-slime-nav
        :init
        (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
          (add-hook hook 'turn-on-elisp-slime-nav-mode)))

      (use-package paredit
        :init
        (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode))

      (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    #+end_src

    Key bindings
    #+begin_src emacs-lisp
      (define-key read-expression-map (kbd "TAB") 'lisp-complete-symbol)
      (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
    #+end_src
*** Eshell
    Start eshell or switch to it if it's active.
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-x m") 'eshell)
    #+end_src

    Start a new eshell even if one is active.
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-x M")
                  (lambda ()
                    (interactive)
                    (eshell t)))
    #+end_src

    Save eshell persistence files out of the way
    #+begin_src emacs-lisp
      (setq eshell-directory-name (expand-file-name "eshell/" calstad/persistence-dir))
    #+end_src
*** Env Files
    Major mode for editing =.env= files, which are used for storing
    environment variables.
    #+begin_src emacs-lisp
      (use-package dotenv-mode
        :mode "\\.env\\..*\\'")
    #+end_src
*** Helm
    [[https://github.com/emacs-helm/helm][Helm]] is an Emacs framework for incremental completions and
    narrowing selections.  There is a good tutorial [[http://tuhdo.github.io/helm-intro.html][here]] and the [[https://github.com/emacs-helm/helm/wiki][wiki]]
    is also very helpful.  The old =ido= and =smex= configuration can
    be found at commit [[https://github.com/calstad/emacs-config/commit/667cbdcf10517f3495767536739e3fc74ffa7ac7][667cbdc]].
    #+begin_src emacs-lisp
      (use-package helm
        :bind (("M-x" . helm-M-x)
               ("C-x C-f" . helm-find-files)
               ("C-x b" . helm-mini)
               ("C-x r b" . helm-filtered-bookmarks))
        :config
        (helm-mode 1)
        (helm-autoresize-mode 1))
    #+end_src
**** Helm BibTex
     [[https://github.com/tmalsburg/helm-bibtex][Helm-bibtex]] is a [[*Helm][Helm]] interface for managing BibTex
     biblographies.

     Use the same functionality as =org-ref= for opening up notes for
     a reference.
     #+begin_src emacs-lisp
       (defun calstad/org-ref-notes-function (candidates)
         (let ((key (helm-marked-candidates)))
           (funcall org-ref-notes-function (car key))))
     #+end_src

     #+begin_src emacs-lisp
       (use-package helm-bibtex
         :after org-ref-helm-bibtex
         :custom
         (bibtex-completion-bibliography "~/Dropbox/research/papers.bib")
         (bibtex-completion-library-path "~/Dropbox/research/pdfs/")
         (bibtex-completion-pdf-symbol "⌘")
         (bibtex-completion-notes-symbol "✎")
         :config
         (helm-delete-action-from-source "Edit notes" helm-source-bibtex)
         (helm-add-action-to-source "Edit notes" 'calstad/org-ref-notes-function helm-source-bibtex 8)
         :bind ("<f6>" . helm-bibtex))
     #+end_src

     Sort BibTex entries in order they are in the BibTex file
     #+begin_src emacs-lisp
       (advice-add 'bibtex-completion-candidates
                   :filter-return 'reverse)
     #+end_src
*** Jupyter
    [[https://github.com/dzop/emacs-jupyter][emacs-jupyter]] is an interface to communicate with Jupyter
    kernels with built-in REPL and =org-mode= frontends.
    #+begin_src emacs-lisp
      (use-package jupyter)
    #+end_src
*** Latex
**** AUCTeX
     [[https://www.emacswiki.org/emacs/AUCTeX][AUCTeX]] is a comprehensive customizable integrated environment for
     writing input files for TeX/LaTeX/ConTeXt/Texinfo using Emacs.
     #+begin_src emacs-lisp
       (use-package tex
         :straight auctex)
     #+end_src
**** CDLaTex
     [[https://orgmode.org/manual/CDLaTeX-mode.html#CDLaTeX-mode][CDLaTex]] is a minor mode for fast input methods for LaTex
     environments and math.
     #+begin_src emacs-lisp
       (use-package cdlatex
         :init
         (add-hook 'org-mode-hook 'turn-on-org-cdlatex))
     #+end_src
**** Auto pair "$"
     #+begin_src emacs-lisp
       (add-hook 'TeX-mode-hook
                 '(lambda ()
                    (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)))
    #+end_src
**** Subscripts and superscripts
     Insert braces after =_= and =^=
     #+begin_src emacs-lisp
       (setq TeX-electric-sub-and-superscript 't)
     #+end_src
*** Magit
    #+begin_src emacs-lisp
      (use-package magit
        :bind ("C-x g" . magit-status)
        :config
        ;; Keep file revert warning from showing everytime magit starts
        (setq magit-last-seen-setup-instructions "1.4.0"))
    #+end_src
*** Markdown
    #+begin_src emacs-lisp
      (use-package markdown-mode)
    #+end_src
*** Org
    =org-mode= is one of the most powerful and amazing features of
    Emacs. I use it for task managment, notes, journal, habit tracker,
    latex, and development environment.
    #+begin_src emacs-lisp
      (use-package org
        :bind (("C-c a" . org-agenda)
               ("C-c b" . org-iswitchb)
               ("C-c c" . org-capture)
               ("C-c l" . org-store-link)))
    #+end_src
**** Todo Items
***** Add an in progress state for todo items
      #+begin_src emacs-lisp
        (setq org-todo-keywords
          '((sequence "TODO" "IN-PROGRESS" "|" "DONE")))
      #+end_src
***** Enable inline tasks
      #+begin_src emacs-lisp
        (require 'org-inlinetask)
        (setq org-inlinetask-min-level 10)
      #+end_src
***** Enable habit tracking
      #+begin_src emacs-lisp
        (add-to-list 'org-modules 'org-habit)
      #+end_src
***** Change Priorities to be 1-9
      #+begin_src emacs-lisp
        (setq org-highest-priority ?1)
        (setq org-lowest-priority ?9)
        (setq org-default-priority ?9)
      #+end_src
**** org-ref
     Org-ref is a library for org-mode that provides rich support for
     citations, labels, and cross-references in org-mode.
     #+begin_src emacs-lisp
       (use-package org-ref
         :custom
         (org-ref-default-bibliography '("~/Dropbox/research/papers.bib"))
         (org-ref-pdf-directory "~/Dropbox/research/pdfs/")
         (reftex-default-bibliography "~/Dropbox/research/papers.bib")
         (org-ref-show-broken-links nil))
     #+end_src
     In the above configuration =org-ref-show-broken-links= is set to
     =nil= because it causes lagging on large files.  See [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org#controlling-link-messages-and-tooltips][here]] for
     some more details.
**** org-roam
     Directory where we keep all of the =org-roam= files.
     #+begin_src emacs-lisp
       (setq calstad/org-roam-dir "~/Dropbox/org/roam")
     #+end_src

     #+begin_src emacs-lisp
       (use-package org-roam
         :hook
         (after-init . org-roam-mode)
         :custom
         (org-roam-directory calstad/org-roam-dir)
         (org-roam-db-location (expand-file-name "org-roam.db" calstad/persistence-dir))
         (org-roam-completion-system 'helm)
         (org-roam-link-title-format "R:%s")
         :bind (:map org-roam-mode-map
                     (("C-c n r" . org-roam)
                      ("C-c n f" . org-roam-find-file)
                      ("C-c n b" . org-roam-switch-to-buffer)
                      ("C-c n g" . org-roam-graph))
                     :map org-mode-map
                     (("C-c n i" . org-roam-insert))
                     (("C-c n I" . org-roam-insert-immediate))))
     #+end_src

     #+begin_src emacs-lisp
       (require 'org-roam-protocol)
       (defun calstad/org-protocol-focus-advice (orig &rest args)
         (x-focus-frame nil)
         (apply orig args))

       (advice-add 'org-roam-protocol-open-ref :around
                   #'calstad/org-protocol-focus-advice)
       (advice-add 'org-roam-protocol-open-file :around
                   #'calstad/org-protocol-focus-advice)
     #+end_src
**** org-roam-bibtex
     To get =org-roam-bibtex= to work I had to delete the
     =bibtex-completion= files from the =helm-bibtex= package so that
     the =bibtex-completion= package from MELPA would be used instead
     #+begin_src emacs-lisp
       (use-package org-roam-bibtex
         :after org-roam
         :hook (org-roam-mode . org-roam-bibtex-mode)
         :bind (:map org-mode-map
                (("C-c n a" . orb-note-actions))))

       (setq orb-preformat-keywords
          '(("citekey" . "=key=") "title" "url" "file" "author-or-editor" "keywords"))

       (setq orb-templates
             '(("r" "ref" plain (function org-roam-capture--get-point)
                ""
                :file-name "${citekey}"
                :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}

       - tags ::
       - keywords :: ${keywords}

       ,* ${title}
       :PROPERTIES:
       :Custom_ID: ${citekey}
       :URL: ${url}
       :AUTHOR: ${author-or-editor}
       :NOTER_DOCUMENT: %(orb-process-file-field \"${citekey}\")
       :NOTER_PAGE:
       :END:")))
     #+end_src
**** org-journal
     #+begin_src emacs-lisp
       (defun calstad/org-journal-go-to-today ()
         (interactive)
         (let ((current-prefix-arg '(4)))
           (call-interactively 'org-journal-new-entry)))

       (use-package org-journal
         :bind
         ("C-c n j" . org-journal-new-entry)
         ("C-c n d" . calstad/org-journal-go-to-today)
         :custom
         (org-journal-date-prefix "#+TITLE: ")
         (org-journal-time-prefix "* ")
         (org-journal-file-format "%Y-%m-%d.org")
         (org-journal-dir calstad/org-roam-dir)
         (org-journal-enable-agenda-integration t)
         (org-journal-cache-file (expand-file-name "org-journal.cache" calstad/persistence-dir)))
     #+end_src

     #+begin_src emacs-lisp
       (defun calstad/org-journal-find-location ()
         ;; Open today's journal, but specify a non-nil prefix argument in order to
         ;; inhibit inserting the heading; org-capture will insert the heading.
         (org-journal-new-entry t)
         ;; Position point on the journal's top-level heading so that org-capture
         ;; will add the new entry as a child entry.
         (goto-char (point-min)))
     #+end_src
**** org-noter
     #+begin_src emacs-lisp
       (use-package org-noter)
     #+end_src
**** Capture
     #+begin_src emacs-lisp
       (setq org-default-notes-file "~/Dropbox/org/capture.org")
       (setq org-capture-templates
             '(("j" "Journal entry" entry (function calstad/org-journal-find-location)
                "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
               ("c" "OrgProtocol capture" entry (function calstad/org-journal-find-location)
                "* TODO %(format-time-string org-journal-time-format) [[%:link][%:description]]\n%i"
                :immediate-finish t)
               ("t" "Task" entry (function calstad/org-journal-find-location)
                "* TODO %(format-time-string org-journal-time-format)%?\n%i")
               ))
     #+end_src
**** Refile
     #+begin_src emacs-lisp
       (setq org-refile-targets '((nil :maxlevel . 9)
                                  (org-agenda-files :maxlevel . 9)))
       ;; (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
       ;; (setq org-refile-use-outline-path t)                  ; Show full paths for refiling
     #+end_src
**** LaTeX
     Highlight LaTeX source in org documents
     #+begin_src emacs-lisp
       (setq org-highlight-latex-and-related '(latex entites))
     #+end_src

     Use [[https://tex.stackexchange.com/questions/78501/change-size-of-the-inline-image-for-latex-fragment-in-emacs-org-mode][this tip]] to increase the scale of inline LaTeX images
     #+begin_src emacs-lisp
       (plist-put org-format-latex-options :scale 1.5)
     #+end_src

     Automatically display LaTeX fragments after they have been
     edited.

     #+begin_src emacs-lisp
       (use-package org-fragtog
         :init
         (add-hook 'org-mode-hook 'org-fragtog-mode))
     #+end_src
**** org-babel
     [[https://orgmode.org/worg/org-contrib/babel/][Babel]] is Org-mode's ability to execute source code within
     Org-mode documents.
***** Language Support
      #+begin_src emacs-lisp
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (latex . t)
           (python . t)
           (jupyter . t)))

        (use-package ob-sagemath
          :config
          (setq org-babel-default-header-args:sage '((:session . t)
                                                     (:results . "output"))))
      #+end_src
****** Use Jupyter for Python Source Blocks
       #+begin_src emacs-lisp
       (org-babel-jupyter-override-src-block "python")
       #+end_src
***** Syntax highlighting for code blocks
     #+begin_src emacs-lisp
       (setq org-src-fontify-natively t)
     #+end_src
***** Don't confirm executing source blocks
      #+begin_src emacs-lisp
        (setq org-confirm-babel-evaluate nil)
      #+end_src
***** Tangle Source Blocks
      According to [[https://www.reddit.com/r/orgmode/comments/5elk0z/prevent_org_from_tangling_certain_sections/][this]] reddit post, this needs to be done to allow
      setting =:tangle no= as a =header-args= property for
      sub-headings.
      #+begin_src emacs-lisp
      (setq org-use-property-inheritance t)
      #+end_src
***** Inline Images
      Display images generated by source blocks.
      #+begin_src emacs-lisp
        (setq org-startup-with-inline-images t)
        (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
      #+end_src
**** Importing
     A function to convert a =markdown= buffer to a =org-mode= buffer
     using =pandoc=.
     #+begin_src emacs-lisp
       (defun markdown-convert-buffer-to-org ()
         "Convert the current buffer's content from markdown to orgmode format and save it with the current buffer's file name but with .org extension."
         (interactive)
         (shell-command-on-region (point-min) (point-max)
                                  (format "pandoc -f markdown -t org -o %s"
                                          (concat (file-name-sans-extension (buffer-file-name)) ".org"))))
     #+end_src
**** Exporting
***** Beamer
      Have earmuffs be =bold= like normal instead of =alert=.
      #+begin_src emacs-lisp
        (defun calstad/beamer-bold (contents backend info)
          (when (eq backend 'beamer)
            (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))
        (add-to-list 'org-export-filter-bold-functions 'calstad/beamer-bold)
      #+end_src
***** LaTex
      Define the command to use for creating PDFs
      #+begin_src emacs-lisp
        ;; (setq org-latex-pdf-process '("latexmk -pdflatex='%latex -shell-escape -bibtex -interaction nonstopmode' -pdf -output-directory=%o -f %f"))
        (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
      #+end_src

      Use the =tabularx= package for exporting org-mode tables
      #+begin_src emacs-lisp
        (add-to-list 'org-latex-packages-alist '("" "tabularx"))
      #+end_src
***** Markdown
      This package allows for GitHub flavored markdown
              #+begin_src emacs-lisp
                (use-package ox-gfm
                  :after ox)
              #+end_src
***** Pandoc
      [[https://github.com/kawabata/ox-pandoc][ox-pandoc]] is an =org-mode= exporter backend that utilizes
      =pandoc= for exporting to multiple formats.
      #+begin_src emacs-lisp
        (use-package ox-pandoc
          :after ox)
      #+end_src
*** PDF Tools
    [[https://github.com/politza/pdf-tools][PDF Tools]] is, among other things, a replacement of DocView for PDF
    files. The key difference is that pages are not pre-rendered by
    e.g. ghostscript and stored in the file-system, but rather created
    on-demand and stored in memory.
    #+begin_src emacs-lisp
      (use-package pdf-tools
        :mode ("\\.pdf\\'" . pdf-view-mode)
        :config (pdf-tools-install))
    #+end_src
*** Python
**** Elpy
    =elpy= Emacs package to bring powerful Python editing to Emacs. It
    combines and configures a number of other packages, both written
    in Emacs Lisp as well as Python.  Documentation can be found [[https://elpy.readthedocs.io/en/latest/index.html][here]].
    #+begin_src emacs-lisp
      ;; (use-package elpy
      ;;   :config
      ;;   (elpy-enable)
      ;;   (setq python-shell-interpreter "jupyter"
      ;;         python-shell-interpreter-args "console --simple-prompt"
      ;;         python-shell-prompt-detect-failure-warning nil
      ;;         ;; Fixes bug in garbled console output
      ;;         ;; https://github.com/jorgenschaefer/elpy/issues/1550#issuecomment-487039854
      ;;         elpy-shell-echo-output nil
      ;;         ;; Guess the offset but don't warn when it can't
      ;;         python-indent-guess-indent-offset t
      ;;         python-indent-guess-indent-offset-verbose nil
      ;;         )
      ;;   (add-to-list 'python-shell-completion-native-disabled-interpreters
      ;;                "jupyter"))
    #+end_src
**** Pyenv and Pip
     [[https://github.com/proofit404/pyenv-mode][Pyenv mode]] allows for using =pyenv= environments with
     =python-mode=
     #+begin_src emacs-lisp
       (use-package pyenv-mode
         :config
         (pyenv-mode)
         ;; Keybindings conflict with org-mode
         (unbind-key "C-c C-u" pyenv-mode-map)
         (unbind-key "C-c C-s" pyenv-mode-map))
     #+end_src

     [[https://github.com/ssbb/pyenv-mode-auto#pyenv-mode-auto][Pyenv auto mode]] automatically activates a =pyenv= environment
     from a =.python-version= file.
     #+begin_src emacs-lisp
       (use-package pyenv-mode-auto)
     #+end_src

     [[https://github.com/brotzeit/pippel][Pippel]] is an Emacs frontend for the Python package manager
     =pip=. As pippel also uses =tabulated-list-mode=, it provides a
     similiar package menu like =package-list-packages=.
     #+begin_src emacs-lisp
       (use-package pippel)
     #+end_src
*** Rest Client
    [[https://github.com/pashky/restclient.el][Restclient]] is a major mode for exploring HTTP REST web services.
    #+begin_src emacs-lisp
      (use-package restclient)
    #+end_src
*** SageMath
    [[http://www.sagemath.org][Sage]] is an open source mathematics software system that wraps a
    lot of different math packages.
    #+begin_src emacs-lisp
      (use-package sage-shell-mode)
    #+end_src
*** YAML
    #+begin_src emacs-lisp
      (use-package yaml-mode)
    #+end_src
*** YASnippet
    =yasnippet= is a template system for Emacs that allows type an
    abbreviation and automatically expand it into function templates.

    Load =yasnippet= on programming langauge major modes.
    #+begin_src emacs-lisp
      (use-package yasnippet
        :config
        (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
        (yas-global-mode 1))
    #+end_src
* Emacs Server
  Start the emacs server so that clients can connect
  #+begin_src emacs-lisp
    (server-start)
  #+end_src
